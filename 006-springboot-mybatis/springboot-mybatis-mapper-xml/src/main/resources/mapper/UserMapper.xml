<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.keqi.springbootmybatismapperxml.mapper.UserMapper">

    <resultMap id="UserMap" type="com.keqi.springbootmybatismapperxml.domain.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
    </resultMap>


    <!--
        <sql/>标签中定义的sql代码段能够被重用，其它语句中可以通过<include/>标签引入，这个功能还是很有用的，可以避免
        重复些一样的SQL片段，比如把一个表中的所有字段都定义在这里面，其它地方只需要引入即可，非常的省事。但是也不要滥用！
    -->
    <sql id="userColumns">
        username,id
    </sql>

    <!--=======================1、测试增删改方法的使用=========================================//-->

    <!--
        <insert/> 标签一共有11个属性，但是需要掌握的也就是下面这三个属性，其他的就当做不存在就行
            id : 这个用来和mapper接口中的方法名关联，这样两者就能够关联起来了
            useGeneratedKeys：指定MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部自动生成的主键
            keyProperty：获取到自动生成的主键后，应该设置到方法参数的那个字段中

            parameterType: 指定参数的类型(不需要指定，让mybatis根据方法中的参数类型自动去判断即可，不需要画蛇添足)
    -->
    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id" >
        insert into t_user(username) value (#{username})
    </insert>

    <!--
        <delete/> 标签一共有8个属性，需要掌握的只有一个，其他的就当做不存在就行

        id : 这个用来和mapper接口中的方法名关联，这样两者就能够关联起来了

        parameterType: 指定参数的类型(不需要指定，让mybatis根据方法中的参数类型自动去判断即可，不需要画蛇添足)
    -->
    <delete id="deleteUserById">
        delete from t_user where id = #{id}
    </delete>



    <!--
        <update/> 标签一共有11个属性，但是需要掌握的也就是下面这一个属性，其他的就当做不存在就行

        id : 这个用来和mapper接口中的方法名关联，这样两者就能够关联起来了

        parameterType: 指定参数的类型(不需要指定，让mybatis根据方法中的参数类型自动去判断即可，不需要画蛇添足)

        <update/>标签中虽然有 useGeneratedKeys & keyProperty 这两个属性，但是实在不明白有什么用，当它不存在就行
        唯一的用处应该是在根据指定字段删除了某一条记录的时候，返回这个记录的id，这点作用吧。太偏门了，当它不存在
    -->
    <update id="updateUserById">
        update t_user set username = #{username} where id = #{id}
    </update>

    <!--=======================2、测试基本查询方法的使用==================================-->

    <!--
        <select/> 标签一共有15个属性，但是需要掌握的也就是下面这两个属性，其他的就当做不存在就行
            id : 这个用来和mapper接口中的方法名关联，这样两者就能够关联起来了

            resultMap：这个结果集映射是Mybatis最强大的特性，如果你对其理解透彻，很多复杂映射的场景都能够迎刃而解。这个会单独进行演示

            resultType: sql查询出来的数据直接封装到指定类型的对象中(不建议使用此字段，原因如下：
                1、表中的字段名和实体类属性命名方式不同，一般都无法直接映射，否则就需要在sql中给查询出来的字段取别名
                2、sql中的字段直接映射进实体类，耦合过重，且无法利用到resultMap提供的高级功能，阿里编码规范也明确指出禁用resultType
            )
            parameterType: 指定参数的类型(不需要指定，让mybatis根据方法中的参数类型自动去判断即可，不需要画蛇添足)
    -->
    <select id="selectUserById" resultType="com.keqi.springbootmybatismapperxml.domain.User">
        select id,username from t_user where id = #{id}
    </select>

    <!--
        <resultMap/>标签的基本使用
    -->
    <select id="selectUserByUsername" resultMap="UserMap">
        select id,username from t_user where username = #{username}
    </select>

    <!--=======================3、测试方法参数的映射===========================================-->

    <!--
        方法中只有单个参数时，直接使用#{}的语法指定参数名即可
        即便名称不同也没有影响,但是不建议这么做
    -->
    <select id="singleMethodParam" resultMap="UserMap">
        select id,username from t_user where username = #{usee}
    </select>


    <!--
        如果方法中是一个实体类对象时，直接使用#{}的语法指定要使用实体类中的哪个属性即可
        此时指定的名称必须和实体类中对应的属性名相同
    -->
    <select id="singleEntityParam" resultMap="UserMap">
        select id,username from t_user where username = #{username}
    </select>

    <!--
        如果方法中有多个参数，就必须要使用@Param注解指定别名,然后再在xml中使用
    -->
    <select id="multiMethodParam" resultMap="UserMap">
        select id,username from t_user where username = #{username} and id = #{id}
    </select>

    <!--
        如果方法中有多个实体类的参数，需要使用@Param注解指定别名，且需要通过"别名.属性名"的方式去使用
    -->
    <select id="multiEntityParam" resultMap="UserMap">
        select id,username from t_user where id = #{user1.id} and username = #{user2.username}
    </select>



    <!--
        对于方法参数中是一个List类型的时候，<foreach/>标签中的collection属性值得问题：
            1、未使用@Param注解修饰的时候，必须设置为list或者collection
            2、使用了@Param注解修饰的时候，就设置为该注解中指定的值即可

        这里为什么不加上useGeneratedKeys和keyColumn两个注解呢？因为这种批量增加记录的方式，是不支持自动设置主键的
    -->
    <insert id="listParam1">
        insert into t_user(username) 
        values 
        <foreach collection="collection" item="user" separator=",">
            (#{user.username})
        </foreach>
    </insert>

    <!--
        对于方法参数中是一个List类型的时候，<foreach/>标签中的collection属性值得问题：
            1、未使用@Param注解修饰的时候，必须设置为list或者collection
            2、使用了@Param注解修饰的时候，就设置为该注解中指定的值即可

        这里为什么不加上useGeneratedKeys和keyColumn两个注解呢？因为这种批量增加记录的方式，是不支持自动设置主键的
    -->
    <insert id="listParam2">
        insert into t_user(username)
        values
        <foreach collection="userList" item="user" separator=",">
            (#{user.username})
        </foreach>
    </insert>

    <!--
        对于方法参数中是一个Set类型的时候，<foreach/>标签中的collection属性值得问题：
            1、未使用@Param注解修饰的时候，必须设置为collection
            2、使用了@Param注解修饰的时候，就设置为该注解中指定的值即可

        这里为什么不加上useGeneratedKeys和keyColumn两个注解呢？因为这种批量增加记录的方式，是不支持自动设置主键的
    -->
    <insert id="setParam1">
        insert into t_user(username)
        values
        <foreach collection="collection" item="user" separator=",">
            (#{user.username})
        </foreach>
    </insert>

    <!--
        对于方法参数中是一个Set类型的时候，<foreach/>标签中的collection属性值得问题：
            1、未使用@Param注解修饰的时候，必须设置为collection
            2、使用了@Param注解修饰的时候，就设置为该注解中指定的值即可

        这里为什么不加上useGeneratedKeys和keyColumn两个注解呢？因为这种批量增加记录的方式，是不支持自动设置主键的
    -->
    <insert id="setParam2">
        insert into t_user(username)
        values
        <foreach collection="userSet" item="user" separator=",">
            (#{user.username})
        </foreach>
    </insert>

    <!--
        对于方法参数中是一个Array类型的时候，<foreach/>标签中的collection属性值得问题：
            1、未使用@Param注解修饰的时候，必须设置为collection或者array
            2、使用了@Param注解修饰的时候，就设置为该注解中指定的值即可

        这里为什么不加上useGeneratedKeys和keyColumn两个注解呢？因为这种批量增加记录的方式，是不支持自动设置主键的
    -->
    <insert id="arrayParam1">
        insert into t_user(username)
        values
        <foreach collection="array" item="user" separator=",">
            (#{user.username})
        </foreach>
    </insert>

    <!--
        对于方法参数中是一个Set类型的时候，<foreach/>标签中的collection属性值得问题：
            1、未使用@Param注解修饰的时候，必须设置为collection或者array
            2、使用了@Param注解修饰的时候，就设置为该注解中指定的值即可

        这里为什么不加上useGeneratedKeys和keyColumn两个注解呢？因为这种批量增加记录的方式，是不支持自动设置主键的
    -->
    <insert id="arrayParam2">
        insert into t_user(username)
        values
        <foreach collection="users" item="user" separator=",">
            (#{user.username})
        </foreach>
    </insert>


    <!--======================4、动态SQL的使用=======================================-->

    <!--
        <if/> 标签中只有一个test属性，通过OGNL表达式进行真假判断。凡是需要进行if判断的地方都可以使用此标签！！！
    -->
    <select id="dynamicIf" resultMap="UserMap">
        select id, username from t_user order by id
        <if test="sortOrder == null">
            asc
        </if>
        ${sortOrder}
    </select>

    <!--
        <choose/> 标签内部包含了<when/>和<otherwise/>两个标签，实际上就是一个if else的逻辑。任何标签内部都可以使用此标签！
    -->
    <select id="dynamicChoose" resultMap="UserMap">
        select id, username from t_user order by id
        <choose>
            <when test="sortOrder == null">
                desc
            </when>
            <otherwise>
                ${sortOrder}
            </otherwise>
        </choose>
    </select>


    <!--
        <foreach/>标签内部一共有6个属性，需要掌握的有5个。通常都是在需要进行批量操作的时候用到，比如批量删除、新增等场景

            collection: 指定集合的名称，如果使用了@Param注解，就用注解中指定的别名，如果没有就直接将值设置为collection
            item: 给集合中的元素取一个别名，通过"item.属性名"的方式取出集合中元素的值
            open: 在循环开始的时候的值，可选的
            close：在循环结束的时候的值，可选的
            separator：在每一次遍历结束之后的分隔符，可选的


            index ：不需要掌握
    -->
    <insert id="dynamicForeach">
        insert into t_user(username)
        values
        <foreach collection="collection" item="user" separator=",">
            (#{user.username})
        </foreach>
    </insert>

    <!--
        <where/>标签内部没有属性，他的作用是生成"where"关键字，并且去除第一个多余的and或者or关键字

        需要注意的点是：
            1、如果<where/>标签中没有任何内容，那么where关键字也不会出现
            2、<where/>标签只能够去除这段动态SQL最前面的and 或者 or 关键字
    -->
    <select id="dynamicWhere" resultMap="UserMap">
        select id,username from t_user
        <where>
            <if test="id != null">
                id = #{id}
            </if>
            <if test="username != null">
                and username = #{username}
            </if>
        </where>
    </select>

    <!--
        <set/>标签内部没有属性，它的作用是生成"set"关键字，并且去除整段SQL中最后的一个","

        需要注意的是：
            1、如果<set/>标签中没有任何内容，那么set关键字也不会出现
            2、<set/>标签只能够去除这段动态SQL最后面的符号","
    -->
    <update id="dynamicSet">
        update t_user
        <set>
            <if test="id != null">
                id = #{id},
            </if>
            <if test="username != null">
                username = #{username},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--
        <trim/>标签内部有4个属性，都需要掌握。它的作用在它包含的整段SQL片段中去除/增加首尾的指定内容

            prefix ：在整体的字符串前面加上一个前缀
            prefixOverrides ：在整体的字符串前面减去指定内容
            suffix : 在在整体的字符串后面加上指定内容
            suffixOverrides ： 在整体的字符串后面减去指定的内容

         <set/><where/>标签其实就是<trim/>标签的一个变种而已
    -->
    <update id="dynamicTrim">
        update t_user
        <trim prefix="set" suffixOverrides=",">
            <if test="id != null">
                id = #{id},
            </if>
            <if test="username != null">
                username = #{username},
            </if>
        </trim>
        where id = #{id}
    </update>

</mapper>